#!/usr/bin/env perl
# Hidden actions:
# Install dependencies:
# $ script/convos install
# Same as above, but also install dependencies required for development
# $ script/convos install --develop

BEGIN {
  if ($ENV{SNAP} and $ENV{SNAP_USER_COMMON}) {
    $ENV{CONVOS_HOME} ||= $ENV{SNAP_USER_COMMON};
    @INC = map {
      my $local = "$ENV{SNAP}$_";    # Example: /snap/convos/x45/usr/share/perl5
      warn "INC: $local / $_\n" if $ENV{CONVOS_SNAP_DEBUG};
      -e $local ? $local : $_;
    } @INC;
  }
}

# IMPORTANT!
# Cannot load Mojo::File or any other module before they are installed
use feature 'state';
use strict;
use warnings;
use Config;
use File::Spec;
use FindBin;
my %seen;

sub path_to {
  state $home = File::Spec->catdir($FindBin::Bin, File::Spec->updir);
  return File::Spec->catfile($home, @_);
}

$ENV{LINK_EMBEDDER_FORCE_SECURE} //= 1;    # Make sure LinkEmbedder upgrade http to https
$ENV{MOJO_NPM_BINARY} = 'pnpm';

my $command = $ARGV[0] || '';
$ENV{MOJO_LOG_LEVEL} ||= 'fatal'      if grep { $command eq $_ } qw(get version);
$ENV{MOJO_MODE}      ||= 'production' if $command eq 'daemon';

unless ($ENV{CONVOS_SETUP}++) {
  my $bin       = path_to 'local', 'bin';
  my $cpanfile  = path_to 'cpanfile';
  my $local_lib = path_to 'local';

  # Extra helper programs
  $ENV{PATH} = join ':', grep {$_} $bin, $ENV{PATH} if -d $bin;

  # Where cpanm might have installed dependencies to
  unshift @INC,
    grep {-d} map { path_to 'local', 'lib', 'perl5', @$_ }[$Config{version}, $Config{archname}],
    [$Config{version}], [$Config{archname}], [];

  # Where Convos lives
  unshift @INC, path_to 'lib';

  # Force PERL5LIB to be loaded before the custom @INC directories above
  unshift @INC, split /:/, $ENV{PERL5LIB} if $ENV{PERL5LIB};

  # Make sure the dependencies from cpanfile is installed
  exit ensure_dependencies($cpanfile, @ARGV) if $command eq 'install';

  # Note that "morbo script/convos" will not run ensure_dependencies()
  ensure_dependencies($cpanfile, @ARGV) if __PACKAGE__ eq 'main' and -e $cpanfile;
}

@INC = grep { !$seen{$_}++ } @INC;    # duplicates are caused by "dev" command
pop @INC if $INC[-1] eq '.';          # don't care about current dir

if ($command eq 'dev') {
  $ENV{$_} //= 1 for qw(MOJO_ASSETPACK_LAZY MOJO_IRC_DEBUG CONVOS_DEBUG);
  $ENV{PERL5LIB} = join ':', @INC;
  $ARGV[0] = 'webpack';
  push @ARGV, qw(-w lib -w public/convos-api.json -w templates) unless grep {/^-?-w/} @ARGV;
  secure_listen(@ARGV);
  warn "\$ script/convos @ARGV\n";
  exec $^X => qw(script/convos), @ARGV;
  die "Could not exec morbo @ARGV: $!\n";
}

# Start Convos
require Mojolicious::Commands;

if ($command eq 'version') {
  open my $STDOUT, '>', \(my $stdout = '');
  select $STDOUT;
  Mojolicious::Commands->start_app('Convos');
  $stdout =~ s!CORE\s*!CORE\n  Convos      ($Convos::VERSION)\n  !s;
  print STDOUT $stdout;
}
else {
  load_certs();
  maybe_warn_about_root();
  Mojolicious::Commands->start_app('Convos');
}

sub ensure_dependencies {
  return if $ENV{CONVOS_SKIP_DEPENDENCIES_CHECK};
  my ($cpanfile, $action, $mode) = @_;
  my @cpanm     = ($^X, path_to 'script', 'cpanm');
  my $local_lib = path_to 'local';
  my ($n, @missing) = (0);

  $mode ||= '';

  our $cpanfile_mode = 'default';
  no warnings 'once';
  local *main::on            = sub { local $cpanfile_mode = shift; shift->() };
  local *main::test_requires = sub { };
  local *main::requires = sub {
    my ($module, $version) = @_;
    return if ++$n and eval "use $module $version;1";
    my $e = do {
      local $_ = $@;
      s! at .*!!s;
      s! in \@INC.*!!s;
      s!$module.*--.*?([\d\._]+).*!You have version $1!;
      $_;
    };
    push @missing, [$module, $version, $e, $cpanfile_mode];
  };

  if ($action eq 'install' and $mode eq '--help') {
    die "Usage: $0 install [--develop]\n";
  }

  if (!-r $cpanm[1]) {
    main::requires('App::cpanminus', '1.7016');    # cpanm -M ... is required
    @cpanm = qw(cpanm);
  }

  do $cpanfile;
  die "Could not source $cpanfile: $@" unless $n;
  @missing = grep { $_->[3] ne 'develop' } @missing if $mode ne '--develop';
  pop @$_ for @missing;

  if (@missing and $action ne 'install') {
    my @msg;
    push @msg, "Perl executable:", "  $^X\n", "Perl \@INC:", map({"-  $_"} @INC)
      if $ENV{CONVOS_DEBUG};
    push @msg, "\nIs is not possible to start Convos at this point, since",
      "there are some missing dependencies that need to be installed:\n",
      map({ sprintf "-  %s %s # %s", @$_ } @missing),
      qq(\nRun "$0 install" to install the missing dependencies above,),
      qq(or run "CONVOS_DEBUG=1 $0 @ARGV" for more information.\n\n);
    die join "", map {"\n$_"} @msg;
  }

  $ENV{MOJO_WEBPACK_REINSTALL} //= $action eq 'install' && $mode eq '--develop' ? 1 : 0;

  for my $m (@missing) {
    $ENV{CPAN_MIRROR} //= 'https://cpan.metacpan.org' if eval 'require IO::Socket::SSL;1';
    my @cmd = (@cpanm, '-n', -l => $local_lib);
    push @cmd, -M => $ENV{CPAN_MIRROR} if $ENV{CPAN_MIRROR};
    push @cmd, $m->[0];
    warn sprintf ">>> %s\n", join ' ', @cmd;
    system @cmd;
    die "cpanm failed!\n" if $?;
  }

  if ($action eq 'install') {
    warn join "\n", "\n-------------------------------", "All dependencies are installed!",
      qq(\nYou can now run "$0 daemon --listen http://*:8000" to start Convos.\n\n);
  }

  return 0;
}

sub load_certs {
  return unless opendir my $DH, path_to;
  while (my $file = readdir $DH) {
    my $file = path_to $file;
    $ENV{CONVOS_TLS_KEY}  = $file and next if $file =~ m!-key\.pem$!;
    $ENV{CONVOS_TLS_CERT} = $file and next if $file =~ m!\.pem$!;
  }
}

sub maybe_warn_about_root {
  return if $ENV{CONVOS_NO_ROOT_WARNING};
  return if $< && $>;

  $ENV{USER} ||= 'root';
  warn <<"HERE";

  UID  = $<
  EUID = $>
  USER = $ENV{USER}

  --------------------------------------------------------------------
  WARNING!
  --------------------------------------------------------------------

  You should NOT run Convos as root!

  It is not considered a good security practice to run servers as the
  root user.

  Note that if you used to run Convos as root, then you have to change
  ownership to files in your "\$CONVOS_HOME" directory.

  We strongly encourage you to change to a less privileged user.

  --------------------------------------------------------------------

HERE
}

sub secure_listen {
  require Mojo::URL;

  my $url;
  my $i = 0;
  while ($i < @ARGV) {
    $url = Mojo::URL->new($ARGV[$i]) if $ARGV[$i] =~ m!^https?:!;
    $i++;
  }

  $i = @ARGV unless $url;
  $url ||= Mojo::URL->new('https://*:3443');
  return if $url->scheme eq 'http';

  load_certs();
  $url->query->param(cert => $ENV{CONVOS_TLS_CERT}) if $ENV{CONVOS_TLS_CERT};
  $url->query->param(key  => $ENV{CONVOS_TLS_KEY})  if $ENV{CONVOS_TLS_KEY};

  return unless $url->query->param('cert') and $url->query->param('key');
  splice @ARGV, $i, 0, ($i == @ARGV ? ('--listen') : ()), $url->to_string;
}
