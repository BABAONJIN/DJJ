<template class="vue-connection-editor">
  <form @submit.prevent="saveConnection">
    <div class="row">
      <div class="col s12">
        <div class="actions">
          <a href="#chat" @click.prevent="visibleSection = 'chat'"><i class="material-icons">close</i></a>
        </div>
        <h5>Connection editor</h5>
        <p v-if="connections.length">
          You need to add a connection before you can have a dialog.
          <span v-if="defaultServer">
            We have filled in an example server, but you can connect to any server
            you like. "Username" and "password" are optional in most cases.
          </span>
          <span v-else>
            You need to fill in "server", but "username" and "password" are
            optional in most cases.
          </span>
        </p>
      </div>
    </div>
    <div class="row">
      <div class="input-field col s12">
        <select id="form_connection_id">
          <option value="">Create new connection...</option>
          <option :selected="connection == c" :value="c.id" v-for="c in connections">{{c.protocol}}-{{c.name}}</option>
        </select>
        <label for="form_connection_id">Select connection</label>
      </div>
    </div>
    <div class="row">
      <div class="input-field col s3">
        <select id="form_protocol">
          <option value="irc">IRC</option>
        </select>
        <label for="form_protocol">Protocol</label>
      </div>
      <div class="input-field col s9">
        <input name="server" v-model="server" id="form_server" type="text" class="validate">
        <label for="form_server">Server</label>
      </div>
    </div>
    <div class="row" v-if="showNickField">
      <div class="input-field col s12">
        <input name="nick" v-model="nick" id="form_nick" type="text" class="validate">
        <label for="form_nick">Nick</label>
      </div>
    </div>
    <div class="row">
      <div class="input-field col s6">
        <input name="username" v-model="username" id="form_username" type="text" class="validate">
        <label for="form_username">Username</label>
      </div>
      <div class="input-field col s6">
        <input name="password" v-model="password" id="form_password" type="password" autocomplete="off" class="validate">
        <label for="form_password">Password</label>
      </div>
    </div>
    <div class="row" v-if="errors.length">
      <div class="input-field col s12"><div class="alert">{{errors[0].message}}</div></div>
    </div>
    <div class="row">
      <div class="input-field col s12">
        <button class="btn waves-effect waves-light" type="submit">
          {{connection ? 'Update' : 'Create'}} <i class="material-icons right">save</i>
        </button>
        <a href="#delete" @click.prevent="removeConnection" class="btn-delete right" v-if="connection">
          <i class="material-icons">delete</i>
        </a>
        <span class="grey-text text-darken-2">State: {{connection ? connection.state : 'new'}}.</span>
      </div>
    </div>
  </form>
</template>
<script type="vue/component">
module.exports = {
  props:    ["settings", "user", "visibleSection"],
  computed: {
    connections: function() {
      return this.user.connections();
    },
    showNickField: function() {
      return this.selectedProtocol == "irc";
    }
  },
  data: function() {
    var currentDialog = this.user.currentDialog();
    return {
      connection:       currentDialog.connection,
      defaultServer:    this.settings.default_server || "",
      errors:           [],
      password:         "",
      nick:             "",
      selectedProtocol: "irc",
      server:           this.settings.default_server || "",
      username:         ""
    };
  },
  methods: {
    removeConnection: function() {
      var self = this;
      this.user.removeConnection(this.connection, function(err) {
        if (err) return self.errors = err;
        self.connection = this.connections()[0];
      });
    },
    saveConnection: function() {
      var self       = this;
      var connection = this.connection || new Convos.Connection({});
      var userinfo   = [this.username, this.password].join(":");

      userinfo = userinfo.match(/[^:]/) ? userinfo + "@" : "";
      connection.user = this.user;
      connection.url = this.selectedProtocol + "://" + userinfo + this.server;

      if (this.nick)
        connection.url += "?nick=" + this.nick;

      this.errors = []; // clear error on post
      console.log(connection);
      connection.save(function(err) {
        if (err) return self.errors = err;
        self.updateForm(this);
      });
    },
    updateForm: function(connection) {
      var url = connection ? connection.url.parseUrl() : null;

      this.connection = connection,
      this.password = url ? url.query.password || "" : "";
      this.nick             = url ? url.query.nick || "" : "";
      this.server           = url ? url.hostPort : this.defaultServer;
      this.selectedProtocol = url ? url.scheme || "" : this.selectedProtocol;
      this.username         = url ? url.query.username : "";
    }
  },
  ready: function() {
    var self = this;

    $("#form_connection_id", this.$el).material_select(function() {
      self.updateForm(self.user.connection($(this).val()));
    });

    $("#form_protocol", this.$el).material_select(function() {
      self.selectedProtocol = $(this).val();
    });

    this.updateForm(this.connection);
  }
};
</script>
