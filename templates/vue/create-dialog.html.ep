<template class="vue-create-dialog">
  <form @submit.prevent="join">
    <div class="row">
      <div class="col s12">
        <div class="actions">
          <a href="#chat" @click.prevent="visibleSection = 'chat'"><i class="material-icons">close</i></a>
        </div>
        <h5>Create dialog</h5>
        <p>
          You can create a dialog with either a single user (by nick)
          or join a chat room (channel). Click "<a href="#load" @click.prevent="load">Load</a>"
          to get a list of available rooms. Note that loading the list
          from the server might take a while.
        </p>
      </div>
    </div>
    <div class="row">
      <div class="input-field col s12">
        <select id="form_connection_id" v-model="connectionId">
          <option value="" v-if="!user.connections.length">No connections</option>
          <option :selected="connectionId == c.id" :value="c.id" v-for="c in user.connections">{{c.protocol}}-{{c.name}}</option>
        </select>
        <label for="form_connection_id">Select connection</label>
      </div>
    </div>
    <div class="row">
      <div class="input-field col s12">
        <input v-model="dialogName" id="form_dialog_name" type="text" autocomplete="off" spellcheck="false">
        <div class="autocomplete">
          <ul>
            <li class="link truncate" v-for="r in rooms"><a href="{{r.name}}" tabindex=-1>{{r.name}} - {{r.topic || 'No topic'}}</a></li>
            <li class="no-match" v-if="!rooms.length && noRoomsDescription">{{noRoomsDescription}}</li>
          </ul>
        </div>
        <label for="form_dialog_name">Room or nick</label>
        <p v-if="rooms.length">Found {{rooms.length}} room{{rooms.length == 1 ? '' : 's'}}.</p>
      </div>
    </div>
    <div class="row" v-if="errors.length">
      <div class="input-field col s12"><div class="alert">{{errors[0].message}}</div></div>
    </div>
    <div class="row">
      <div class="input-field col s12">
        <button class="btn waves-effect waves-light" :disabled="!canSubmit">
          Chat <i class="material-icons right">send</i>
        </button>
        <a href="#load" @click.prevent="load" class="btn waves-effect waves-light">
          Load <i class="material-icons right">refresh</i>
        </a>
      </div>
    </div>
  </form>
</template>
<script type="vue/component">
module.exports = {
  props:    ["user", "visibleSection"],
  computed: {
    connection: function() {
      return this.user.connections.filter(function(c) {
          return c.id == this.connectionId;
        }.bind(this))[0] || this.user.dialogs.filter(function(d) {
          return d.active();
        }).map(function(d) {
          return d.connection;
        })[0];
    }
  },
  data: function() {
    return {
      canSubmit:          false,
      connectionId:       "",
      dialogName:         "",
      errors:             [],
      noRoomsDescription: null,
      rooms:              []
    };
  },
  methods: {
    join: function(e) {
      if (!this.dialogName.length) return;
      if (!this.connection) return this.missingConnectionError();
      this.connection.send("/join " + this.dialogName);
    },
    load: function(e) {
      if (!this.connection) return this.missingConnectionError();
      this.noRoomsDescription = "Loading rooms from " + this.connection.id + "...";
      this.connection.rooms(function(err, rooms) {
        if (err) return this.noRoomsDescription = err[0];
        this.rooms      = rooms;
        this.dialogName = "";
        $("#form_dialog_name").autocomplete("update");
      }.bind(this));
    },
    missingConnectionError: function() {
      this.errors = [{
        message: "You need to create a connection first."
      }];
    }
  },
  ready: function() {
    var self = this;
    $("#form_connection_id", this.$el).material_select();
    $("#form_dialog_name").autocomplete({
      onkeyup: function(e) {
        self.canSubmit = self.dialogName.length;
      },
      onselect: function(e) {
        self.canSubmit = true;
      }
    });
  }
};
</script>
