<template class="vue-user-input">
  <form method="post" @submit="send">
    <!-- div class="actions">
      <a href="#attach" class="tooltipped" title="Attach file"><i class="material-icons">attach_file</i></a>
      <a href="#webcam" class="tooltipped" title="Take picture"><i class="material-icons">photo_camera</i></a>
      <a href="#emoji" class="tooltipped" title="Insert emoji"><i class="material-icons">insert_emoticon</i></a>
      <a href="#send" @click="send" class="tooltipped" title="Send message"><i class="material-icons">send</i></a>
    </div -->
    <textarea v-model="message"
      class="materialize-textarea"
      :placeholder="placeholder"
      @keyup.enter.prevent="send"
      @keydown.esc.prevent="unfocus"
      @keydown.down.prevent="history"
      @keydown.tab.prevent="autocomplete"
      @keydown.up.prevent="history"
    ></textarea>
  </form>
</template>
<script type="vue/component">
var before;
var matches;
var needle;
var commands = [
  "/me ",
  "/msg ",
  "/query ", // TODO
  "/join #",
  "/say ",
  "/nick ",
  "/whois ",
  "/names",
  "/close",
  "/part ",
  "/mode ", // TODO
  "/topic ",
  "/disconnect",
  "/connect"
];

module.exports = {
  props:    ["dialog", "user"],
  computed: {
    placeholder: function() {
      try {
        var state = this.dialog.connection ? this.dialog.connection.state : 'initializing';
        if (state == "connected") {
          return "What do you want to say to " + this.dialog.name + "?";
        } else {
          return 'State is "' + state + '".';
        }
      } catch ( err ) {
        return "Please enter commands as instructed.";
      }
    }
  },
  data: function() {
    return {
      message: ""
    };
  },
  methods: {
    autocomplete: function(e) {
      var input = $("textarea", this.$el);
      if (!this.autocompleteMatches) {
        before = this.message.substring(0, input.selectionStart);
        needle = "";

        this._autocompleteAfter  = this.message.substring(input.selectionStart);
        this._autocompleteBefore = before.replace(/(\S+)\s*$/, function(all, n) {
          needle = n;
          return "";
        });

        matches = [needle].concat(this.autocompleteList(this._autocompleteBefore, needle, this._autocompleteAfter));
        if (!this._autocompleteBefore.length)
          matches = matches.concat(commands);
        matches = matches.filter(function(command) {
          return !command.indexOf(needle);
        });
        this._autocompleteIndex  = 0;
        this.autocompleteMatches = matches;
      }

      matches = this.autocompleteMatches;
      if (!matches.length) return;

      this._autocompleteIndex += e.shiftKey ? -1 : 1;
      if (this._autocompleteIndex < 0)
        this._autocompleteIndex = matches.length - 1;
      if (this._autocompleteIndex == matches.length)
        this._autocompleteIndex = 0;

      this.message = this._autocompleteBefore + matches[this._autocompleteIndex];
    },
    autocompleteList: function() {
      return [];
    },
    history: function(e) {
      console.log(e);
    },
    localCmdHelp: function(e) {
      $("a.help").click();
    },
    localCmdJoin: function(e) {
      $("a.create-dialog").click();
    },
    send: function(e) {
      var m = this.message;
      var l = "localCmd" + m.replace(/^\//, "").ucFirst();
      var c = this.dialog.connection || this.user.connections[0];
      this.message = "";
      if ("localCmd" + m != l && this[l]) return this[l](e);
      if (c && m.length) c.send(m, this.dialog.connection ? this.dialog : '');
    },
    unfocus: function(e) {
      $("nav a:first").focus(); // TODO: Need better logic
    }
  },
  ready: function() {
    this.$nextTick(function() {
      $("textarea", this.$el).focus();
    });
  }
};
</script>
